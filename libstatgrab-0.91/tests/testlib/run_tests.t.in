use strict;
use warnings;

use FindBin ();
use lib ("$FindBin::Bin/../testlib");
use lib ("@srcdir@/../testlib");

use Getopt::Long qw(:config bundling);
use Data::Dumper ('Dumper');
use Pod::Usage   ('pod2usage');

use run_tests    ();

my %cmdOptions = ();
GetOptions( \%cmdOptions,
	    "help|h" => sub { pod2usage(0); },
	    "items|i=i@" =>,
	  ) or exit(1);

my $test_prog = "$FindBin::Bin/@test-bin@";
chdir($FindBin::Bin);

my $tester = run_tests->new( $test_prog );
my $test_variants;
foreach my $item_count (@{$cmdOptions{items}}) {
	push( @$test_variants, $tester->get_test_combinations( $item_count ) );
}
$tester->run_tests( \@ARGV, $test_variants );

=head1 NAME

run_tests (script) - runs the @test-name@ tests

=head1 DESCRIPTION

This I<run_tests> script runs the @test-name@ tests for libstatgrab.

=head1 SYNOPSIS

@synopsis@

=head1 OPTIONS

=over 8

=item C<--items|-i>

Specify how amount of I<libstatgrab>'s functions to test. All possible
combinations of k elements from n functions are generated and passed to
C<@test-bin@>.

=item C<-->

Separator for options passed directly to C<@test-bin@>.

=back

=over 4

=item *

The options of C<@test-bin@> can be seen when running
C<@test-dir@/@test-bin@> with the C<-h> option.

=item *

The available libstatgrab functions of C<@test-bin@> can be seen
when running C<@test-dir@/@test-bin@> with the
C<-l> option.

=back

=head1 AUTHOR

Jens Rehsack <sno@NetBSD.org>

=cut
